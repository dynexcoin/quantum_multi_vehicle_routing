[DYNEX] :: Checking if clustering is feasible
[DYNEX] :: Getting clustering DQM
[DYNEX] :: Running DynexCompute for optimization
[DYNEX] :: DQM
[DYNEX] :: <dimod.discrete.discrete_quadratic_model.DiscreteQuadraticModel object at 0x0000021691C6F040>
[DYNEX] :: Converting DQM to CQM
[DYNEX] :: Creating Dynex model
[DYNEX] :: Initializing Dynex Sampler
[DYNEX] :: Sampling with num_reads=256 and annealing_time=100
[DYNEX] :: Inverting sampleset to get CQM sample
[DYNEX] :: Solution FOUND !!
[DYNEX] :: (107070, 0): 1, (107070, 1): 0, (107070, 2): 0, (107070, 3): 0, (108396, 0): 0
(108396, 1): 0, (108396, 2): 1, (108396, 3): 0, (108474, 0): 0, (108474, 1): 0
(108474, 2): 1, (108474, 3): 0, (108561, 0): 1, (108561, 1): 0, (108561, 2): 0
(108561, 3): 0, (108941, 0): 0, (108941, 1): 0, (108941, 2): 0, (108941, 3): 1
(109398, 0): 0, (109398, 1): 1, (109398, 2): 0, (109398, 3): 0, (109766, 0): 0
(109766, 1): 1, (109766, 2): 0, (109766, 3): 0, (198272, 0): 0, (198272, 1): 0
(198272, 2): 1, (198272, 3): 0, (2384950, 0): 0, (2384950, 1): 0, (2384950, 2): 0
(2384950, 3): 1, (10540502, 0): 0, (10540502, 1): 0, (10540502, 2): 0, (10540502, 3): 1
(10621314, 0): 0, (10621314, 1): 0, (10621314, 2): 0, (10621314, 3): 1, (10621468, 0): 0
(10621468, 1): 0, (10621468, 2): 1, (10621468, 3): 0, (10703281, 0): 1, (10703281, 1): 0
(10703281, 2): 0, (10703281, 3): 0, (11440354, 0): 0, (11440354, 1): 0, (11440354, 2): 0
(11440354, 3): 1, (18059991, 0): 0, (18059991, 1): 1, (18059991, 2): 0, (18059991, 3): 0
(18670871, 0): 0, (18670871, 1): 0, (18670871, 2): 0, (18670871, 3): 1, (18691138, 0): 0
(18691138, 1): 0, (18691138, 2): 0, (18691138, 3): 1, (25455205, 0): 1, (25455205, 1): 0
(25455205, 2): 0, (25455205, 3): 0, (25456104, 0): 0, (25456104, 1): 1, (25456104, 2): 0
(25456104, 3): 0, (25471281, 0): 0, (25471281, 1): 1, (25471281, 2): 0, (25471281, 3): 0
(25471905, 0): 0, (25471905, 1): 1, (25471905, 2): 0, (25471905, 3): 0, (25475688, 0): 0
(25475688, 1): 1, (25475688, 2): 0, (25475688, 3): 0, (25481089, 0): 0, (25481089, 1): 0
(25481089, 2): 1, (25481089, 3): 0, (25499656, 0): 0, (25499656, 1): 1, (25499656, 2): 0
(25499656, 3): 0, (25523370, 0): 0, (25523370, 1): 1, (25523370, 2): 0, (25523370, 3): 0
(26311315, 0): 0, (26311315, 1): 0, (26311315, 2): 0, (26311315, 3): 1, (28418141, 0): 0
(28418141, 1): 1, (28418141, 2): 0, (28418141, 3): 0, (28800458, 0): 0, (28800458, 1): 0
(28800458, 2): 1, (28800458, 3): 0, (33779448, 0): 0, (33779448, 1): 0, (33779448, 2): 1
(33779448, 3): 0, (34214695, 0): 0, (34214695, 1): 0, (34214695, 2): 1, (34214695, 3): 0
(35340339, 0): 0, (35340339, 1): 0, (35340339, 2): 0, (35340339, 3): 1, (49500593, 0): 1
(49500593, 1): 0, (49500593, 2): 0, (49500593, 3): 0, (52813511, 0): 0, (52813511, 1): 0
(52813511, 2): 1, (52813511, 3): 0, (166454005, 0): 1, (166454005, 1): 0, (166454005, 2): 0
(166454005, 3): 0, (245406664, 0): 0, (245406664, 1): 0, (245406664, 2): 1, (245406664, 3): 0
(250666245, 0): 0, (250666245, 1): 0, (250666245, 2): 0, (250666245, 3): 1, (277426053, 0): 1
(277426053, 1): 0, (277426053, 2): 0, (277426053, 3): 0, (288164005, 0): 0, (288164005, 1): 0
(288164005, 2): 1, (288164005, 3): 0, (288929909, 0): 0, (288929909, 1): 0, (288929909, 2): 0
(288929909, 3): 1, (299611432, 0): 0, (299611432, 1): 0, (299611432, 2): 0, (299611432, 3): 1
(301662421, 0): 0, (301662421, 1): 0, (301662421, 2): 0, (301662421, 3): 1, (333167377, 0): 1
(333167377, 1): 0, (333167377, 2): 0, (333167377, 3): 0, (612966910, 0): 0, (612966910, 1): 1
(612966910, 2): 0, (612966910, 3): 0, (654181286, 0): 0, (654181286, 1): 0, (654181286, 2): 1
(654181286, 3): 0, (870487714, 0): 1, (870487714, 1): 0, (870487714, 2): 0, (870487714, 3): 0
(870487740, 0): 1, (870487740, 1): 0, (870487740, 2): 0, (870487740, 3): 0, (1342099857, 0): 0
(1342099857, 1): 0, (1342099857, 2): 0, (1342099857, 3): 1, (2460356321, 0): 0, (2460356321, 1): 1
(2460356321, 2): 0, (2460356321, 3): 0, (3769868472, 0): 0, (3769868472, 1): 0, (3769868472, 2): 1
(3769868472, 3): 0, (4771408696, 0): 1, (4771408696, 1): 0, (4771408696, 2): 0, (4771408696, 3): 0
(5360013217, 0): 0, (5360013217, 1): 1, (5360013217, 2): 0, (5360013217, 3): 0, (6199868583, 0): 0
(6199868583, 1): 0, (6199868583, 2): 1, (6199868583, 3): 0, (7203717550, 0): 1, (7203717550, 1): 0
(7203717550, 2): 0, (7203717550, 3): 0, (8481522617, 0): 0, (8481522617, 1): 0, (8481522617, 2): 0
(8481522617, 3): 1, (8990483451, 0): 1, (8990483451, 1): 0, (8990483451, 2): 0, (8990483451, 3): 0
(9312404911, 0): 1, (9312404911, 1): 0, (9312404911, 2): 0, (9312404911, 3): 0, (9780502951, 0): 0
(9780502951, 1): 0, (9780502951, 2): 1, (9780502951, 3): 0, (11062147834, 0): 1, (11062147834, 1): 0
(11062147834, 2): 0, (11062147834, 3): 0, (11738287693, 0): 0, (11738287693, 1): 0, (11738287693, 2): 0
(11738287693, 3): 1, (11747206861, 0): 0, (11747206861, 1): 1, (11747206861, 2): 0, (11747206861, 3): 0
('s_capacity_0_0', 0): 0, ('s_capacity_0_0', 1): 1, ('s_capacity_0_1', 0): 1, ('s_capacity_0_1', 1): 0, ('s_capacity_0_2', 0): 0
('s_capacity_0_2', 1): 1, ('s_capacity_0_3', 0): 1, ('s_capacity_0_3', 1): 0, ('s_capacity_0_4', 0): 0, ('s_capacity_0_4', 1): 1
('s_capacity_0_5', 0): 1, ('s_capacity_0_5', 1): 0, ('s_capacity_0_6', 0): 0, ('s_capacity_0_6', 1): 1, ('s_capacity_0_7', 0): 1
('s_capacity_0_7', 1): 0, ('s_capacity_1_0', 0): 0, ('s_capacity_1_0', 1): 1, ('s_capacity_1_1', 0): 0, ('s_capacity_1_1', 1): 1
('s_capacity_1_2', 0): 1, ('s_capacity_1_2', 1): 0, ('s_capacity_1_3', 0): 1, ('s_capacity_1_3', 1): 0, ('s_capacity_1_4', 0): 1
('s_capacity_1_4', 1): 0, ('s_capacity_1_5', 0): 0, ('s_capacity_1_5', 1): 1, ('s_capacity_1_6', 0): 1, ('s_capacity_1_6', 1): 0
('s_capacity_1_7', 0): 1, ('s_capacity_1_7', 1): 0, ('s_capacity_2_0', 0): 1, ('s_capacity_2_0', 1): 0, ('s_capacity_2_1', 0): 1
('s_capacity_2_1', 1): 0, ('s_capacity_2_2', 0): 0, ('s_capacity_2_2', 1): 1, ('s_capacity_2_3', 0): 1, ('s_capacity_2_3', 1): 0
('s_capacity_2_4', 0): 1, ('s_capacity_2_4', 1): 0, ('s_capacity_2_5', 0): 0, ('s_capacity_2_5', 1): 1, ('s_capacity_2_6', 0): 1
('s_capacity_2_6', 1): 0, ('s_capacity_2_7', 0): 1, ('s_capacity_2_7', 1): 0, ('s_capacity_3_0', 0): 0, ('s_capacity_3_0', 1): 1
('s_capacity_3_1', 0): 1, ('s_capacity_3_1', 1): 0, ('s_capacity_3_2', 0): 0, ('s_capacity_3_2', 1): 1, ('s_capacity_3_3', 0): 1
('s_capacity_3_3', 1): 0, ('s_capacity_3_4', 0): 0, ('s_capacity_3_4', 1): 1, ('s_capacity_3_5', 0): 0, ('s_capacity_3_5', 1): 1
('s_capacity_3_6', 0): 0, ('s_capacity_3_6', 1): 1, ('s_capacity_3_7', 0): 1, ('s_capacity_3_7', 1): 0
[DYNEX] :: Processing CQM sample into DQM sample
[DYNEX] :: Assigning clients to vehicles
[DYNEX] :: Initializing capacity violation dictionary
[DYNEX] :: Calculating capacity violations
[DYNEX] :: Storing results in optimization dictionary
